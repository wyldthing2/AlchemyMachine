//Ingredient input
#include <iostream>
#include <string>
#include <sstream>
#include <fstream>
using namespace std;

#define wholelist "Abecean Longfin<>Weakness to Frost<>Fortify Sneak<>Weakness to Poison<>Fortify Restoration<>0.5<>15<>Lakes, rivers, streams, fish barrels<>Ancestor Moth Wing*<>Damage Stamina<>Fortify Conjuration<>Damage Magicka Regen<>Fortify Enchanting<>0.1<>2<>Ancestor Glade<>Ash Creep Cluster‡<>Damage Stamina<>Invisibility<>Resist Fire<>Fortify Destruction<>0.3<>20<>Harvested from ash covered areas of Solstheim<>Ash Hopper Jelly‡<>Restore Health<>Fortify Light Armor<>Resist Shock<>Weakness to Frost<>0.3<>20<>Ash Hopper Corpses<>Ashen Grass Pod‡<>Resist Fire<>Weakness to Shock<>Fortify Lockpicking<>Fortify Sneak<>0.1<>1<>Harvested from ash covered areas of Solstheim<>Bear Claws<>Restore Stamina<>Fortify Health<>Fortify One - Handed<>Damage Magicka Regen<>0.1<>2<>Bears<>Bee<>Restore Stamina<>Ravage Stamina<>Regenerate Stamina<>Weakness to Shock<>0.1<>3<>Beehive<>Beehive Husk<>Resist Poison<>Fortify Light Armor<>Fortify Sneak<>Fortify Destruction<>1<>5<>Beehive<>Berit's Ashes (Identical to Bone Meal)<>Damage Stamina<>Resist Fire<>Fortify Conjuration<>Ravage Stamina<>0.5<>5<>Quest item given by Thadgeir.<>Bleeding Crown<>Weakness to Fire<>Fortify Block<>Weakness to Poison<>Resist Magic<>0.3<>10<>Mushroom clusters<>Blisterwort<>Damage Stamina<>Frenzy<>Restore Health<>Fortify Smithing<>0.2<>12<>Caves and dark areas<>Blue Butterfly Wing<>Damage Stamina<>Fortify Conjuration<>Damage Magicka Regen<>Fortify Enchanting<>0.1<>2<>Blue Butterfly<>Blue Dartwing<>Resist Shock<>Fortify Pickpocket<>Restore Health<>Fear<>0.1<>1<>Hovering above water<>Blue Mountain Flower<>Restore Health<>Fortify Conjuration<>Fortify Health<>Damage Magicka Regen<>0.1<>2<>Mountain flower clumps<>Boar Tusk‡<>Fortify Stamina<>Fortify Health<>Fortify Block<>Frenzy<>0.5<>20<>Tusked Bristlebacks<>Bone Meal<>Damage Stamina<>Resist Fire<>Fortify Conjuration<>Ravage Stamina<>0.5<>5<>Draugr and skeletons<>Briar Heart<>Restore Magicka<>Fortify Block<>Paralysis<>Fortify Magicka<>0.5<>20<>Forsworn Leaders<>Burnt Spriggan Wood‡<>Weakness to Fire<>Fortify Alteration<>Damage Magicka Regen<>Slow<>0.5<>20<>Burnt Spriggans<>Butterfly Wing<>Restore Health<>Fortify Barter<>Lingering Damage Stamina<>Damage Magicka<>0.1<>3<>Monarch Butterfly<>Canis Root<>Damage Stamina<>Fortify One - Handed<>Fortify Marksman<>Paralysis<>0.1<>5<>Near rocky areas<>Charred Skeever Hide<>Restore Stamina<>Cure Disease<>Resist Poison<>Restore Health<>0.5<>1<>Found at campfires<>Chaurus Eggs<>Weakness to Poison<>Fortify Stamina<>Damage Magicka<>Invisibility<>0.2<>10<>Falmer caves<>Chaurus Hunter Antennae*<>Damage Stamina<>Fortify Conjuration<>Damage Magicka Regen<>Fortify Enchanting<>0.1<>2<>Chaurus Hunter Chaurus Hunter Fledgling<>Chicken's Egg<>Resist Magic<>Damage Magicka Regen<>Waterbreathing<>Lingering Damage Stamina<>0.5<>2<>Chicken's Nest<>Creep Cluster<>Restore Magicka<>Damage Stamina Regen<>Fortify Carry Weight<>Weakness to Magic<>0.2<>1<> \Hydro - thermal areas<>Crimson Nirnroot<>Damage Health<>Damage Stamina<>Invisibility<>Resist Magic<>0.2<>10<>Blackreach<>Cyrodilic Spadetail<>Damage Stamina<>Fortify Restoration<>Fear<>Ravage Health<>0.3<>15<>Lakes, rivers, streams, fish barrels<>Daedra Heart<>Restore Health<>Damage Stamina Regen<>Damage Magicka<>Fear<>0.5<>250<>Daedra<>Deathbell<>Damage Health<>Ravage Stamina<>Slow<>Weakness to Poison<>0.1<>4<>Wild, on planters<>Dragon's Tongue<>Resist Fire<>Fortify Barter<>Fortify Illusion<>Fortify Two-handed<>0.1<>5<>Hydro-thermal areas<>Dwarven Oil<>Weakness to Magic<>Fortify Illusion<>Regenerate Magicka<>Restore Magicka<>0.3<>15<>Dwemer Ruins<>Ectoplasm<>Restore Magicka<>Fortify Destruction<>Fortify Magicka<>Damage Health<>0.1<>25<>Ghostlike creatures<>Elves Ear<>Restore Magicka<>Fortify Marksman<>Weakness to Frost<>Resist Fire<>0.1<>10<>Plant, hanging herbs<>Emperor Parasol Moss‡<>Damage Health<>Fortify Magicka<>Regenerate Health<>Fortify Two - Handed<>0.3<>1<>Hanging from Emperor Parasol around Tel Mithryn.<>Eye of Sabre Cat<>Restore Stamina<>Ravage Health<>Damage Magicka<>Restore Health<>0.1<>2<>Sabre Cat, Snowy Sabre Cat<>Falmer Ear<>Damage Health<>Frenzy<>Resist Poison<>Fortify Lockpicking<>0.2<>10<>Falmer<>Felsaad Tern Feathers‡<>Restore Health<>Fortify Light Armor<>Cure Disease<>Resist Magic<>0.1<>15<>Felsaad Tern<>Fire Salts<>Weakness to Frost<>Resist Fire<>Restore Magicka<>Regenerate Magicka<>0.3<>50<>Flame Atronach<>Fly Amanita<>Resist Fire<>Fortify Two - handed<>Frenzy<>Regenerate Stamina<>0.1<>2<>Mushroom clusters in and around caves<>Frost Mirriam<>Resist Frost<>Fortify Sneak<>Ravage Magicka<>Damage Stamina Regen<>0.1<>1<>Hanging in homes, businesses and giant camps<>Frost Salts<>Weakness to Fire<>Resist Frost<>Restore Magicka<>Fortify Conjuration<>0.3<>100<>Frost Atronach<>Garlic<>Resist Poison<>Fortify Stamina<>Regenerate Magicka<>Regenerate Health<>0.3<>1<>Hanging in homes, businesses and cooking areas<>Giant Lichen<>Weakness to Shock<>Ravage Health<>Weakness to Poison<>Restore Magicka<>0.3<>5<>Swamps<>Giant's Toe<>Damage Stamina<>Fortify Health<>Fortify Carry Weight<>Damage Stamina Regen<>1<>20<>Giants<>Gleamblossom*<>Resist Magic<>Fear<>Regenerate Health<>Paralysis<>0.1<>5<>Harvested in Darkfall Cave, Forgotten Vale<>Glow Dust<>Damage Magicka<>Damage Magicka Regen<>Fortify Destruction<>Resist Shock<>0.5<>20<>Wispmother<>Glowing Mushroom<>Resist Shock<>Fortify Destruction<>Fortify Smithing<>Fortify Health<>0.2<>5<>Caves, Dwemer Ruins<>Grass Pod<>Resist Poison<>Ravage Magicka<>Fortify Alteration<>Restore Magicka<>0.1<>1<>Tundras<>Hagraven Claw<>Resist Magic<>Lingering Damage Magicka<>Fortify Enchanting<>Fortify Barter<>0.3<>20<>Hagraven<>Hagraven Feathers<>Damage Magicka<>Fortify Conjuration<>Frenzy<>Weakness to Shock<>0.1<>20<>Hagraven<>Hanging Moss<>Damage Magicka<>Fortify Health<>Damage Magicka Regen<>Fortify One - Handed<>0.3<>1<>Vegetated areas, hanging in caves, from buildings<>Hawk Beak<>Restore Stamina<>Resist Frost<>Fortify Carry Weight<>Resist Shock<>0.3<>15<>Hawks<>Hawk Feathers<>Cure Disease<>Fortify Light Armor<>Fortify One - Handed<>Fortify Sneak<>0.1<>15<>Hawks<>Hawk's Egg†<>Resist Magic<>Damage Magicka Regen<>Waterbreathing<>Lingering Damage Stamina<>0.5<>2<>Hawk's Nest<>Histcarp<>Restore Stamina<>Fortify Magicka<>Damage Stamina Regen<>Waterbreathing<>0.3<>6<>Lakes, rivers, streams and fish barrels<>Honeycomb<>Restore Stamina<>Fortify Block<>Fortify Light Armor<>Ravage Stamina<>1<>5<>Beehive<>Human Flesh<>Damage Health<>Paralysis<>Restore Magicka<>Fortify Sneak<>0.3<>1 < > Falmer Vampire dens<>Human Heart<>Damage Health<>Damage Magicka<>Damage Magicka Regen<>Frenzy<>1<>0<>Falmer Vampire dens<>Ice Wraith Teeth<>Weakness to Frost<>Fortify Heavy Armor<>Invisibility<>Weakness to Fire<>0.3<>30<>Ice Wraith<>Imp Stool<>Damage Health<>Lingering Damage Health<>Paralysis<>Restore Health<>0.3<>0<>Mushroom clusters near caves or dungeons<>Jarrin Root<>Damage Health<>Damage Magicka<>Damage Stamina<>Damage Magicka Regen<>0.5<>10<>Dark Brotherhood Quest<>Jazbay Grapes<>Weakness to Magic<>Fortify Magicka<>Regenerate Magicka<>Ravage Health<>0.2<>1<>Hydro - thermal regions<>Juniper Berries<>Weakness to Fire<>Fortify Marksman<>Regenerate Health<>Damage Stamina Regen<>0.1<>1<>Juniper Trees<>Large Antlers<>Restore Stamina<>Fortify Stamina<>Slow<>Damage Stamina Regen<>0.1<>2<>Deer, Elk<>Lavender<>Resist Magic<>Fortify Stamina<>Ravage Magicka<>Fortify Conjuration<>0.1<>1<>Outdoors in clumps<>Luna Moth Wing<>Damage Magicka<>Fortify Light Armor<>Regenerate Health<>Invisibility<>0.1<>5<>Luna Moth<>Moon Sugar<>Weakness to Fire<>Resist Frost<>Restore Magicka<>Regenerate Magicka<>0.3<>50<>Khajiit Caravans<>Mora Tapinella<>Restore Magicka<>Lingering Damage Health<>Regenerate Stamina<>Fortify Illusion<>0.3<>4<>Dead Trees<>Mudcrab Chitin<>Restore Stamina<>Cure Disease<>Resist Poison<>Resist Fire<>0.3<>2<>Mudcrabs<>Namira's Rot<>Damage Magicka<>Fortify Lockpicking<>Fear<>Regenerate Health<>0.3<>0<>Caves<>Netch Jelly‡<>Paralysis<>Fortify Carry Weight<>Restore Stamina<>Fear<>0.5<>20<>Netch<>Nightshade<>Damage Health<>Damage Magicka Regen<>Lingering Damage Stamina<>Fortify Destruction<>0.1<>8<>Graveyards, undead areas<>Nirnroot<>Damage Health<>Damage Stamina<>Invisibility<>Resist Magic<>0.2<>10<>Near water<>Nordic Barnacle<>Damage Magicka<>Waterbreathing<>Regenerate Health<>Fortify Pickpocket<>0.2<>5<>Underwater<>Orange Dartwing<>Restore Stamina<>Ravage Magicka<>Fortify Pickpocket<>Lingering Damage Health<>0.1<>1<>Hovering above water<>Pearl<>Restore Stamina<>Fortify Block<>Restore Magicka<>Resist Shock<>0.1<>2<>Satchels; Alchemy Laboratory of a Homestead† Pearl Oyster‡<>Pine Thrush Egg<>Restore Stamina<>Fortify Lockpicking<>Weakness to Poison<>Resist Shock<>0.5<>2<>Nests in forests<>Poison Bloom*<>Damage Health<>Slow<>Fortify Carry Weight<>Fear<>0.3<>5<>Darkfall Cave<>Powdered Mammoth Tusk<>Restore Stamina<>Fortify Sneak<>Weakness to Fire<>Fear<>0.1<>2<>Giant Camps, Alchemy Laboratory of a Homestead†<>Purple Mountain Flower<>Restore Stamina<>Fortify Sneak<>Lingering Damage Magicka<>Resist Frost<>0.1<>2<>Mountain flower clumps<>Red Mountain Flower<>Restore Magicka<>Ravage Magicka<>Fortify Magicka<>Damage Health<>0.1<>2<>Mountain flower clumps<>River Betty<>Damage Health<>Fortify Alteration<>Slow<>Fortify Carry Weight<>0.3<>15<>Lakes, rivers, streams and fish barrels<>Rock Warbler Egg<>Restore Health<>Fortify One - Handed<>Damage Stamina<>Weakness to Magic<>0.5<>2<>Rock Warbler Nest<>Sabre Cat Tooth<>Restore Stamina<>Fortify Heavy Armor<>Fortify Smithing<>Weakness to Poison<>0.1<>2<>Sabre Cat, Frost Sabre Cat<>Salmon Roe†<>Restore Stamina<>Waterbreathing<>Fortify Magicka<>Regenerate Magicka<>0.2<>5<>Salmon jumping up falls, Kitchen of a Homestead†<>Salt Pile<>Weakness to Magic<>Fortify Restoration<>Slow<>Regenerate Magicka<>0.2<>2<>Merchants, containers, near cooking places<>Scaly Pholiota<>Weakness to Magic<>Fortify Illusion<>Regenerate Stamina<>Fortify Carry Weight<>0.3<>4<>Dead birch trees<>Scathecraw‡<>Ravage Health<>Ravage Stamina<>Ravage Magicka<>Lingering Damage Health<>0.1<>1<>Harvested all over Solstheim<>Silverside Perch<>Restore Stamina<>Damage Stamina Regen<>Ravage Health<>Resist Frost<>0.3<>15<>Lakes, rivers, streams and fish barrels<>Skeever Tail<>Damage Stamina Regen<>Ravage Health<>Damage Health<>Fortify Light Armor<>0.2<>3<>Skeever<>Slaughterfish Egg<>Resist Poison<>Fortify Pickpocket<>Lingering Damage Health<>Fortify Stamina<>0.2<>3<>Underwater<>Slaughterfish Scales<>Resist Frost<>Lingering Damage Health<>Fortify Heavy Armor<>Fortify Block<>0.1<>3<>Slaughterfish<>Small Antlers<>Weakness to Poison<>Fortify Restoration<>Lingering Damage Stamina<>Damage Health<>0.1<>2<>Elk<>Small Pearl<>Restore Stamina<>Fortify One - Handed<>Fortify Restoration<>Resist Frost<>0.1<>2 < > Pearl Oyster‡<>Snowberries<>Resist Fire<>Fortify Enchanting<>Resist Frost<>Resist Shock<>0.1<>4<>Snowberry bush, snowy areas<>Spawn Ash‡<>Ravage Stamina<>Resist Fire<>Fortify Enchanting<>Ravage Magicka<>0.1<>20<>Ash Spawn<>Spider Egg<>Damage Stamina<>Damage Magicka Regen<>Fortify Lockpicking<>Fortify Marksman<>0.2<>5<>Spider lairs<>Spriggan Sap<>Damage Magicka Regen<>Fortify Enchanting<>Fortify Smithing<>Fortify Alteration<>0.2<>15<>Spriggan<>Swamp Fungal Pod<>Resist Shock<>Lingering Damage Magicka<>Paralysis<>Restore Health<>0.5<>3<>Swamps<>Taproot<>Weakness to Magic<>Fortify Illusion<>Regenerate Magicka<>Restore Magicka<>0.5<>15<>Spriggan<>Thistle Branch<>Resist Frost<>Ravage Stamina<>Resist Poison<>Fortify Heavy Armor<>0.1<>1<>Thistle Plant<>Torchbug Thorax<>Restore Stamina<>Lingering Damage Magicka<>Weakness to Magic<>Fortify Stamina<>0.1<>1<>Torchbugs, glowing at night<>Trama Root‡<>Weakness to Shock<>Fortify Carry Weight<>Damage Magicka<>Slow<>0.2<>1<>Harvested from ashen areas of Solstheim<>Troll Fat<>Resist Poison<>Fortify Two - handed<>Frenzy<>Damage Health<>1<>15<>Trolls<>Tundra Cotton<>Resist Magic<>Fortify Magicka<>Fortify Block<>Fortify Barter<>0.1<>1<>High mountains below snow line, tundra<>Vampire Dust<>Invisibility<>Restore Magicka<>Regenerate Health<>Cure Disease<>0.2<>25<>Vampires, the Silver Hand<>Void Salts<>Weakness to Shock<>Resist Magic<>Damage Health<>Fortify Magicka<>0.2<>125<>Storm Atronach<>Wheat<>Restore Health<>Fortify Health<>Damage Stamina Regen<>Lingering Damage Magicka<>0.1<>5<>Grows on farms, containers<>White Cap<>Weakness to Frost<>Fortify Heavy Armor<>Restore Magicka<>Ravage Magicka<>0.3<>0<>Mushroom clusters near caves or dungeons<>Wisp Wrappings<>Restore Stamina<>Fortify Destruction<>Fortify Carry Weight<>Resist Magic<>0.1<>2<>Wispmother<>Yellow Mountain Flower*<>Resist Poison<>Fortify Restoration<>Fortify Health<>Damage Stamina Regen<>0.1<>2<>Darkfall Cave";




 				
int main(){
	//load the text file and put it into a single string:
	ifstream in("alchemydata.txt");
	stringstream buffer;
	buffer << in.rdbuf();
	string test = buffer.str();

	//create variables that will act as "cursors". we'll take everything between them.
	size_t pos1 = 0;
	size_t pos2;

	struct ingredient {
		string name;
		string e1;
		string e2;
		string e3;
		string e4;
		string wt;
		string val;
		string loc;
	} ingredients[111];

	if (in.is_open()) {

		//FUNCTION TO EXTRACT FROM FILE
		for (int x = 0; x <= 110; x++){
			pos2 = test.find("&", pos1); //search for the "&". pos2 will be where the bar was found.
			ingredients[x].name = test.substr(pos1, (pos2 - pos1)); //make a substring, which is nothing more 
			//than a copy of a fragment of the big string.
			//cout << "Name: " << ingredients[x].name << endl;
			pos1 = pos2 + 1;

			pos2 = test.find("&", pos1);
			ingredients[x].e1 = test.substr(pos1, (pos2 - pos1));
			//cout << "Effect 1: " << ingredients[x].e1 << endl;
			pos1 = pos2 + 1;

			pos2 = test.find("&", pos1);
			ingredients[x].e2 = test.substr(pos1, (pos2 - pos1));
			//cout << "Effect 2: " << ingredients[x].e2 << endl;
			pos1 = pos2 + 1;

			pos2 = test.find("&", pos1);
			ingredients[x].e3 = test.substr(pos1, (pos2 - pos1));
			//cout << "Effect 3: " << ingredients[x].e3 << endl;
			pos1 = pos2 + 1;

			pos2 = test.find("&", pos1);
			ingredients[x].e4 = test.substr(pos1, (pos2 - pos1));
			//cout << "Effect 4: " << ingredients[x].e4 << endl;
			pos1 = pos2 + 1;

			pos2 = test.find("&", pos1);
			ingredients[x].wt = test.substr(pos1, (pos2 - pos1));
			//cout << "Weight: " << ingredients[x].wt << endl;
			pos1 = pos2 + 1;

			pos2 = test.find("&", pos1);
			ingredients[x].val = test.substr(pos1, (pos2 - pos1));
			//cout << "Value: " << ingredients[x].val << endl;
			pos1 = pos2 + 1;

			pos2 = test.find("&", pos1);
			ingredients[x].loc = test.substr(pos1, (pos2 - pos1));
			//cout << "Location: " << ingredients[x].loc << endl;
			//cout << "\n";
			pos1 = pos2 + 1;


			// sets pos1 to the next character after pos2
			//so, it can start searching the next &
		}
		cout << "File opened.\n";

		//HERE, STORE EFFECT NAMES IN A VECTOR AND ALPHABETIZE

		string effects[56];
		string compare[4];
		int x = 0, y = 0, z = 0;
		int u = 0;
		int tf = 0;


		for (x = 0; x <= 110; x++) {			//store effects in array (alphabetize)
			cout << x;
			compare[0] = ingredients[x].e1;
			//cout << compare[0];
			compare[1] = ingredients[x].e2;
			//cout << compare[1];
			compare[2] = ingredients[x].e3;
			//cout << compare[2];
			compare[3] = ingredients[x].e4;
			//cout << compare[3];
			for (y = 0; y <= 3; y++){
				for (z = 0, tf = 1; tf != 0 && z <= u + 1; z++) {
					if (compare[y] != effects[z]){
						tf = 1;
						//cout << y;
					}
					else tf = 0;
				}
				if (tf != 0) {
					effects[u] = compare[y];
					cout << effects[u] << u << "\n";
					u++;
				};
				//stop and go to the next variable
			}
			cout << "\n";
		}
		bool mark;

		do
		{
			mark = 0;
			for (int count = 0; count < u - 1; count++)
			{
				if (effects[count] > effects[count + 1])
				{
					effects[count].swap(effects[count + 1]);
					mark = 1;
				}

			}
		} while (mark == 1);


		for (z = 0; z <= u; z++) {
			cout << z << effects[z] << "\n";
		}


		//Find the rarest
		int rare4[7];
		int rare5[7];
		int rare6[5];
		int rare7[11];
		int rare8[10];
		int rare9[4];
		int rare10[2];
		int rare11[10];
		int r4 = -1;
		int r5 = -1;
		int r6 = -1;
		int r7 = -1;
		int r8 = -1;
		int r9 = -1;
		int r10 = -1;
		int r11 = -1;
		int r = 0;



		for (z = 0; z <= u; z++) {
			r = 0;
			cout << "\nChecking effect: " << effects[z];
			for (x = 0; x <= 110 && r <= 10; x++) {
				if (effects[z] == ingredients[x].e1) {
					r++;
				}
				if (effects[z] == ingredients[x].e2) {
					r++;
				}
				if (effects[z] == ingredients[x].e3) {
					r++;
				}
				if (effects[z] == ingredients[x].e4) {
					r++;
				}
			}
			cout << "Total count:" << r << "\n";

			if (r == 4) {
				r4++;
				rare4[r4] = z;
			}
			if (r == 5) {
				r5++;
				rare5[r5] = z;
			}
			if (r == 6) {
				r6++;
				rare6[r6] = z;
			}
			if (r == 7) {
				r7++;
				rare7[r7] = z;
			}
			if (r == 8) {
				r8++;
				rare8[r8] = z;
			}
			if (r == 9) {
				r9++;
				rare9[r9] = z;
			}
			if (r == 10) {
				r10++;
				rare10[r10] = z;
			}
			if (r == 11) {
				r11++;
				rare11[r11] = z;
			}

		}

		cout << "\n4: " << r4;
		cout << "\n5: " << r5;
		cout << "\n6: " << r6;
		cout << "\n7: " << r7;
		cout << "\n8: " << r8;
		cout << "\n9: " << r9;
		cout << "\n10: " << r10;
		cout << "\n11: " << r11;

		/*//Find the top 14 rarest effects and set up for rotation in the last effect group
		int grouper = 0;
		int lastgrouper = 0;


		if (r4 < 13) {
			for (x = 0; x <= r4; x++) {

			}
			if (r4 + r5 < 12) {
				if (r4 + r5 + r6 < 11) {
					if (r4 + r5 + r6 + r7 < 10) {
						if (r4 + r5 + r6 + r7 + r8 < 9) {
							if (r4 + r5 + r6 + r7 + r8 + r9 < 8) {
								if (r4 + r5 + r6 + r7 + r8 + r9 + r10 < 7) {
									if (r4 + r5 + r6 + r7 + r8 + r9 + r10 + r11 < 6) {
										cout << "Ingredients don't cover 14 different effects, add more ingredients/effects.\n";
									}
								}
							}
						}
					}
				}
			}
		}*/

		/*//need to trade these out for individual effects
		int i4[28];
		int i5[35];
		int i6[20];
		int i7[20];
		int i8[20];
		int i9[20];
		int i10[20];
		int i11[20];

		u = 0;
		for (z = 0; z <= r4; z++) {
				for (x = 0; x <= 110; x++) {
					r = -1;
					if (effects[rare4[z]] == ingredients[x].e1) {
						r = x;
					}
					if (effects[rare4[z]] == ingredients[x].e2) {
						r = x;
					}
					if (effects[rare4[z]] == ingredients[x].e3) {
						r = x;
					}
					if (effects[rare4[z]] == ingredients[x].e4) {
						r = x;
					}
					if (r != -1) {
						i4[u] = r;
						cout << "\nStored in i4: " << ingredients[r].name << u;
						u++;
					}
				}
		}

		u = 0;
		for (z = 0; z <= r5; z++) {
			for (x = 0; x <= 110; x++) {
				r = -1;
				if (effects[rare5[z]] == ingredients[x].e1) {
					r = x;
				}
				if (effects[rare5[z]] == ingredients[x].e2) {
					r = x;
				}
				if (effects[rare5[z]] == ingredients[x].e3) {
					r = x;
				}
				if (effects[rare5[z]] == ingredients[x].e4) {
					r = x;
				}
				
				if (r != -1) {
					i5[u] = r;
					u++;
					cout << "\nStored in i5: " << ingredients[r].name << u;
				}
			}
		}
		*/

		//take the most rare effect groups and put them in a group of 14 ingredients, with a last remainder group to be added in different combinations.
		int groupm = -1;
		string group[14];
		int lastgroupm = -1;
		string lastgroup[50];
		int g1im = -1;
		int g1i[11];
		int g2im = -1;
		int g2i[11];
		int g3im = -1;
		int g3i[11];
		int g4im = -1;
		int g4i[11];
		int g5im = -1;
		int g5i[11];
		int g6im = -1;
		int g6i[11];
		int g7im = -1;
		int g7i[11];
		int g8im = -1;
		int g8i[11];
		int g9im = -1;
		int g9i[11];
		int g10im = -1;
		int g10i[11];
		int g11im = -1;
		int g11i[11];
		int g12im = -1;
		int g12i[11];
		int g13im = -1;
		int g13i[11];
		int g14im = -1;
		int g14i[11];

	


		if (r4 <= 13) {
			for (groupm = -1, y = 0; y <= r4; y++) {
				groupm++;
				group[groupm] = effects[rare4[y]];
				//cout << "\nThis was just added to 'group': " << group[groupm];
			}
		}
			if (r4 + r5 <= 12) {
				for (y = 0; y <= r5; y++) {
					groupm++;
					group[groupm] = effects[rare5[y]];
					//cout << "\nThis was just added to 'group': " << group[groupm];
				}
			}
		/*	else for (x = 0; x <= r5; x++) {
				lastgroupm++;
				lastgroup[x] = rare4[x];
			}
		}
		else for (x = 0; x <= r4; x++) {
			lastgroupm++;
			lastgroup[x] = rare4[x];
		}

		for (x = 0; x <= 54; x++){
			cout << "the effects: " << effects[x];
		}*/

		cout << "These are the rarest effects: " << group[0] << " " << group[1] << " " << group[2] << " " << group[3];

		/*for (x = 0; x <= groupm; x++) {
			cout << "These are the rarest effects: " << effects[group[x]];
		}
*/

		//Have each ingredient of that effect put into a group
		x = 0;
		while (x <= groupm) {
			cout << "\nIT STARTED!";
			x = 0;
			for (y = 0; y <= 110; y++) {
				if (group[x] == ingredients[y].e1) {
					g1im++;
					g1i[g1im] = y;
				}
				if (group[x] == ingredients[y].e2) {
					g1im++;
					g1i[g1im] = y;
				}
				if (group[x] == ingredients[y].e3) {
					g1im++;
					g1i[g1im] = y;
				}
				if (group[x] == ingredients[y].e4) {
					g1im++;
					g1i[g1im] = y;
				}
			}
			x = 1;
			for (y = 0; y <= 110; y++) {
				if (group[x] == ingredients[y].e1) {
					g2im++;
					g2i[g2im] = y;
				}
				if (group[x] == ingredients[y].e2) {
					g2im++;
					g2i[g2im] = y;
				}
				if (group[x] == ingredients[y].e3) {
					g2im++;
					g2i[g2im] = y;
				}
				if (group[x] == ingredients[y].e4) {
					g2im++;
					g2i[g2im] = y;
				}
			}
			x = 2;
			for (y = 0; y <= 110; y++) {
				if (group[x] == ingredients[y].e1) {
					g3im++;
					g3i[g3im] = y;
				}
				if (group[x] == ingredients[y].e2) {
					g3im++;
					g3i[g3im] = y;
				}
				if (group[x] == ingredients[y].e3) {
					g3im++;
					g3i[g3im] = y;
				}
				if (group[x] == ingredients[y].e4) {
					g3im++;
					g3i[g3im] = y;
				}
			}
			x = 3;
			for (y = 0; y <= 110; y++) {
				if (group[x] == ingredients[y].e1) {
					g4im++;
					g4i[g4im] = y;
				}
				if (group[x] == ingredients[y].e2) {
					g4im++;
					g4i[g4im] = y;
				}
				if (group[x] == ingredients[y].e3) {
					g4im++;
					g4i[g4im] = y;
				}
				if (group[x] == ingredients[y].e4) {
					g4im++;
					g4i[g4im] = y;
				}
			}
			x = 4;
			for (y = 0; y <= 110; y++) {
				if (group[x] == ingredients[y].e1) {
					g5im++;
					g5i[g5im] = y;
				}
				if (group[x] == ingredients[y].e2) {
					g5im++;
					g5i[g5im] = y;
				}
				if (group[x] == ingredients[y].e3) {
					g5im++;
					g5i[g5im] = y;
				}
				if (group[x] == ingredients[y].e4) {
					g5im++;
					g5i[g5im] = y;
				}
			}
			x = 5;
			for (y = 0; y <= 110; y++) {
				if (group[x] == ingredients[y].e1) {
					g6im++;
					g6i[g6im] = y;
				}
				if (group[x] == ingredients[y].e2) {
					g6im++;
					g6i[g6im] = y;
				}
				if (group[x] == ingredients[y].e3) {
					g6im++;
					g6i[g6im] = y;
				}
				if (group[x] == ingredients[y].e4) {
					g6im++;
					g6i[g6im] = y;
				}
			}
			x = 6;
			for (y = 0; y <= 110; y++) {
				if (group[x] == ingredients[y].e1) {
					g7im++;
					g7i[g7im] = y;
				}
				if (group[x] == ingredients[y].e2) {
					g7im++;
					g7i[g7im] = y;
				}
				if (group[x] == ingredients[y].e3) {
					g7im++;
					g7i[g7im] = y;
				}
				if (group[x] == ingredients[y].e4) {
					g7im++;
					g7i[g7im] = y;
				}
			}
			x = 7;
			for (y = 0; y <= 110; y++) {
				if (group[x] == ingredients[y].e1) {
					g8im++;
					g8i[g8im] = y;
				}
				if (group[x] == ingredients[y].e2) {
					g8im++;
					g8i[g8im] = y;
				}
				if (group[x] == ingredients[y].e3) {
					g8im++;
					g8i[g8im] = y;
				}
				if (group[x] == ingredients[y].e4) {
					g8im++;
					g8i[g8im] = y;
				}
			}
			x = 8;
			for (y = 0; y <= 110; y++) {
				if (group[x] == ingredients[y].e1) {
					g9im++;
					g9i[g9im] = y;
				}
				if (group[x] == ingredients[y].e2) {
					g9im++;
					g9i[g9im] = y;
				}
				if (group[x] == ingredients[y].e3) {
					g9im++;
					g9i[g9im] = y;
				}
				if (group[x] == ingredients[y].e4) {
					g9im++;
					g9i[g9im] = y;
				}
			}
			x = 9;
			for (y = 0; y <= 110; y++) {
				if (group[x] == ingredients[y].e1) {
					g10im++;
					g10i[g10im] = y;
				}
				if (group[x] == ingredients[y].e2) {
					g10im++;
					g10i[g10im] = y;
				}
				if (group[x] == ingredients[y].e3) {
					g10im++;
					g10i[g10im] = y;
				}
				if (group[x] == ingredients[y].e4) {
					g10im++;
					g10i[g10im] = y;
				}
			}
			x = 10;
			for (y = 0; y <= 110; y++) {
				if (group[x] == ingredients[y].e1) {
					g11im++;
					g11i[g11im] = y;
				}
				if (group[x] == ingredients[y].e2) {
					g11im++;
					g11i[g11im] = y;
				}
				if (group[x] == ingredients[y].e3) {
					g11im++;
					g11i[g11im] = y;
				}
				if (group[x] == ingredients[y].e4) {
					g11im++;
					g11i[g11im] = y;
				}
			}
			x = 11;
			for (y = 0; y <= 110; y++) {
				if (group[x] == ingredients[y].e1) {
					g12im++;
					g12i[g12im] = y;
				}
				if (group[x] == ingredients[y].e2) {
					g12im++;
					g12i[g12im] = y;
				}
				if (group[x] == ingredients[y].e3) {
					g12im++;
					g12i[g12im] = y;
				}
				if (group[x] == ingredients[y].e4) {
					g12im++;
					g12i[g12im] = y;
				}
			}
			x = 12;
			for (y = 0; y <= 110; y++) {
				if (group[x] == ingredients[y].e1) {
					g13im++;
					g13i[g13im] = y;
				}
				if (group[x] == ingredients[y].e2) {
					g13im++;
					g13i[g13im] = y;
				}
				if (group[x] == ingredients[y].e3) {
					g13im++;
					g13i[g13im] = y;
				}
				if (group[x] == ingredients[y].e4) {
					g13im++;
					g13i[g13im] = y;
				}
			}
			x = 13;
			for (y = 0; y <= 110; y++) {
				if (group[x] == ingredients[y].e1) {
					g14im++;
					g14i[g14im] = y;
				}
				if (group[x] == ingredients[y].e2) {
					g14im++;
					g14i[g14im] = y;
				}
				if (group[x] == ingredients[y].e3) {
					g14im++;
					g14i[g14im] = y;
				}
				if (group[x] == ingredients[y].e4) {
					g14im++;
					g14i[g14im] = y;
				}
			}
			x = 14;
		}


		//Add on the last group in a way that can be recombined



		//Do the combos d

		int a, b, c, d, e, f, g, h, i, j, k, l, m, n;
		a = 0;

		int count = -1;
		string combo[56];
		struct res {
			int i1;
			int i2;
			int i3;
			int i4;
			int i5;
			int i6;
			int i7;
			int i8;
			int i9;
			int i10;
			int i11;
			int i12;
			int i13;
			int i14;
			int reps;
		} sol[5], next;

		sol[0].reps = 20;
		sol[1].reps = 20;
		sol[2].reps = 20;
		sol[3].reps = 20;
		sol[4].reps = 20;

		if (lastgroupm == -1) {
			/*for (a = 0; a <= g1im; a++){
				for (b = 0; b <= g2im; b++){
					do {
						mark = 1;
						if (g2i[b] == g1i[a]){
							b++;
							mark = 0;
						}
					} while (mark == 0);
					for (c = 0; c <= g3im; c++){
						do {
							mark = 1;
							if (g3i[c] == g1i[a]){
								c++;
								mark = 0;
							}
							if (g3i[c] == g2i[b]){
								c++;
								mark = 0;
							}
						} while (mark == 0);
						for (d = 0; d <= g4im; d++){
							do {
								mark = 1;
								if (g4i[d] == g1i[a]){
									d++;
									mark = 0;
								}
								if (g4i[d] == g2i[b]){
									d++;
									mark = 0;
								}
								if (g4i[d] == g3i[c]){
									d++;
									mark = 0;
								}
							} while (mark == 0);
							for (e = 0; e <= g5im; e++){
								do {
									mark = 1;
									if (g5i[e] == g1i[a]){
										e++;
										mark = 0;
									}
									if (g5i[e] == g2i[b]){
										e++;
										mark = 0;
									}
									if (g5i[e] == g3i[c]){
										e++;
										mark = 0;
									}
									if (g5i[e] == g4i[d]){
										e++;
										mark = 0;
									}
								} while (mark == 0);
			*/
			int a = 0;
			int b = 0;
			int c = 0;
			int d = 0;
			int e = 0;
								for (f = 0; f <= g6im; f++){
									do {
										mark = 1;
										if (g6i[f] == g1i[a]){
											f++;
											mark = 0;
										}
										if (g6i[f] == g2i[b]){
											f++;
											mark = 0;
										}
										if (g6i[f] == g3i[c]){
											f++;
											mark = 0;
										}
										if (g6i[f] == g4i[d]){
											f++;
											mark = 0;
										}
										if (g6i[f] == g5i[e]){
											f++;
											mark = 0;
										}
									} while (mark == 0);
									for (g = 0; g <= g7im; g++){
										do {
											mark = 1;
											if (g7i[g] == g1i[a]){
												g++;
												mark = 0;
											}
											if (g7i[g] == g2i[b]){
												g++;
												mark = 0;
											}
											if (g7i[g] == g3i[c]){
												g++;
												mark = 0;
											}
											if (g7i[g] == g4i[d]){
												g++;
												mark = 0;
											}
											if (g7i[g] == g5i[e]){
												g++;
												mark = 0;
											}
											if (g7i[g] == g6i[f]){
												g++;
												mark = 0;
											}
										} while (mark == 0);
										for (h = 0; h <= g8im; h++){
											do {
												mark = 1;
												if (g8i[h] == g1i[a]){
													h++;
													mark = 0;
												}
												if (g8i[h] == g2i[b]){
													h++;
													mark = 0;
												}
												if (g8i[h] == g3i[c]){
													h++;
													mark = 0;
												}
												if (g8i[h] == g4i[d]){
													h++;
													mark = 0;
												}
												if (g8i[h] == g5i[e]){
													h++;
													mark = 0;
												}
												if (g8i[h] == g6i[f]){
													h++;
													mark = 0;
												}
												if (g8i[h] == g7i[g]){
													h++;
													mark = 0;
												}
											} while (mark == 0);
											for (i = 0; i <= g9im; i++){
												do {
													mark = 1;
													if (g9i[i] == g1i[a]){
														i++;
														mark = 0;
													}
													if (g9i[i] == g2i[b]){
														i++;
														mark = 0;
													}
													if (g9i[i] == g3i[c]){
														i++;
														mark = 0;
													}
													if (g9i[i] == g4i[d]){
														i++;
														mark = 0;
													}
													if (g9i[i] == g5i[e]){
														i++;
														mark = 0;
													}
													if (g9i[i] == g6i[f]){
														i++;
														mark = 0;
													}
													if (g9i[i] == g7i[g]){
														i++;
														mark = 0;
													}
													if (g9i[i] == g8i[h]){
														i++;
														mark = 0;
													}
												} while (mark == 0);
												for (j = 0; j <= g10im; j++){
													do {
														mark = 1;
														if (g10i[j] == g1i[a]){
															j++;
															mark = 0;
														}
														if (g10i[j] == g2i[b]){
															j++;
															mark = 0;
														}
														if (g10i[j] == g3i[c]){
															j++;
															mark = 0;
														}
														if (g10i[j] == g4i[d]){
															j++;
															mark = 0;
														}
														if (g10i[j] == g5i[e]){
															j++;
															mark = 0;
														}
														if (g10i[j] == g6i[f]){
															j++;
															mark = 0;
														}
														if (g10i[j] == g7i[g]){
															j++;
															mark = 0;
														}
														if (g10i[j] == g8i[h]){
															j++;
															mark = 0;
														}
														if (g10i[j] == g9i[i]){
															j++;
															mark = 0;
														}
													} while (mark == 0);
													for (k = 0; k <= g11im; k++){
														do {
															mark = 1;
															if (g11i[k] == g1i[a]){
																k++;
																mark = 0;
															}
															if (g11i[k] == g2i[b]){
																k++;
																mark = 0;
															}
															if (g11i[k] == g3i[c]){
																k++;
																mark = 0;
															}
															if (g11i[k] == g4i[d]){
																k++;
																mark = 0;
															}
															if (g11i[k] == g5i[e]){
																k++;
																mark = 0;
															}
															if (g11i[k] == g6i[f]){
																k++;
																mark = 0;
															}
															if (g11i[k] == g7i[g]){
																k++;
																mark = 0;
															}
															if (g11i[k] == g8i[h]){
																k++;
																mark = 0;
															}
															if (g11i[k] == g9i[i]){
																k++;
																mark = 0;
															}
															if (g11i[k] == g10i[j]){
																k++;
																mark = 0;
															}
														} while (mark == 0);
														for (l = 0; l <= g12im; l++){
															do {
																mark = 1;
																if (g12i[l] == g1i[a]){
																	l++;
																	mark = 0;
																}
																if (g12i[l] == g2i[b]){
																	l++;
																	mark = 0;
																}
																if (g12i[l] == g3i[c]){
																	l++;
																	mark = 0;
																}
																if (g12i[l] == g4i[d]){
																	l++;
																	mark = 0;
																}
																if (g12i[l] == g5i[e]){
																	l++;
																	mark = 0;
																}
																if (g12i[l] == g6i[f]){
																	l++;
																	mark = 0;
																}
																if (g12i[l] == g7i[g]){
																	l++;
																	mark = 0;
																}
																if (g12i[l] == g8i[h]){
																	l++;
																	mark = 0;
																}
																if (g12i[l] == g9i[i]){
																	l++;
																	mark = 0;
																}
																if (g12i[l] == g10i[j]){
																	l++;
																	mark = 0;
																}
																if (g12i[l] == g11i[k]){
																	l++;
																	mark = 0;
																}
															} while (mark == 0);
															for (m = 0; m <= g13im; m++){
																do {
																	mark = 1;
																	if (g13i[m] == g1i[a]){
																		m++;
																		mark = 0;
																	}
																	if (g13i[m] == g2i[b]){
																		m++;
																		mark = 0;
																	}
																	if (g13i[m] == g3i[c]){
																		m++;
																		mark = 0;
																	}
																	if (g13i[m] == g4i[d]){
																		m++;
																		mark = 0;
																	}
																	if (g13i[m] == g5i[e]){
																		m++;
																		mark = 0;
																	}
																	if (g13i[m] == g6i[f]){
																		m++;
																		mark = 0;
																	}
																	if (g13i[m] == g7i[g]){
																		m++;
																		mark = 0;
																	}
																	if (g13i[m] == g8i[h]){
																		m++;
																		mark = 0;
																	}
																	if (g13i[m] == g9i[i]){
																		m++;
																		mark = 0;
																	}
																	if (g13i[m] == g10i[j]){
																		m++;
																		mark = 0;
																	}
																	if (g13i[m] == g11i[k]){
																		m++;
																		mark = 0;
																	}
																	if (g13i[m] == g12i[l]){
																		m++;
																		mark = 0;
																	}
																} while (mark == 0);
																for (n = 0; n <= g14im; n++){
																	do {
																		mark = 1;
																		if (g14i[n] == g1i[a]){
																			n++;
																			mark = 0;
																		}
																		if (g14i[n] == g2i[b]){
																			n++;
																			mark = 0;
																		}
																		if (g14i[n] == g3i[c]){
																			n++;
																			mark = 0;
																		}
																		if (g14i[n] == g4i[d]){
																			n++;
																			mark = 0;
																		}
																		if (g14i[n] == g5i[e]){
																			n++;
																			mark = 0;
																		}
																		if (g14i[n] == g6i[f]){
																			n++;
																			mark = 0;
																		}
																		if (g14i[n] == g7i[g]){
																			n++;
																			mark = 0;
																		}
																		if (g14i[n] == g8i[h]){
																			n++;
																			mark = 0;
																		}
																		if (g14i[n] == g9i[i]){
																			n++;
																			mark = 0;
																		}
																		if (g14i[n] == g10i[j]){
																			n++;
																			mark = 0;
																		}
																		if (g14i[n] == g11i[k]){
																			n++;
																			mark = 0;
																		}
																		if (g14i[n] == g12i[l]){
																			n++;
																			mark = 0;
																		}
																		if (g14i[n] == g13i[m]){
																			n++;
																			mark = 0;
																		}
																	} while (mark == 0);
																	combo[0] = ingredients[g1i[a]].e1;
																	//cout << combo[0];
																	combo[1] = ingredients[g1i[a]].e2;
																	//cout << combo[1];
																	combo[2] = ingredients[g1i[a]].e3;
																	//cout << combo[2];
																	combo[3] = ingredients[g1i[a]].e4;
																	//cout << combo[3];
																	combo[4] = ingredients[g2i[b]].e1;
																	combo[5] = ingredients[g2i[b]].e2;
																	combo[6] = ingredients[g2i[b]].e3;
																	combo[7] = ingredients[g2i[b]].e4;
																	combo[8] = ingredients[g3i[c]].e1;
																	combo[9] = ingredients[g3i[c]].e2;
																	combo[10] = ingredients[g3i[c]].e3;
																	combo[11] = ingredients[g3i[c]].e4;
																	combo[12] = ingredients[g4i[d]].e1;
																	combo[13] = ingredients[g4i[d]].e2;
																	combo[14] = ingredients[g4i[d]].e3;
																	combo[15] = ingredients[g4i[d]].e4;
																	combo[16] = ingredients[g5i[e]].e1;
																	combo[17] = ingredients[g5i[e]].e2;
																	combo[18] = ingredients[g5i[e]].e3;
																	combo[19] = ingredients[g5i[e]].e4;
																	combo[20] = ingredients[g6i[f]].e1;
																	combo[21] = ingredients[g6i[f]].e2;
																	combo[22] = ingredients[g6i[f]].e3;
																	combo[23] = ingredients[g6i[f]].e4;
																	combo[24] = ingredients[g7i[g]].e1;
																	combo[25] = ingredients[g7i[g]].e2;
																	combo[26] = ingredients[g7i[g]].e3;
																	combo[27] = ingredients[g7i[g]].e4;
																	combo[28] = ingredients[g8i[h]].e1;
																	combo[29] = ingredients[g8i[h]].e2;
																	combo[30] = ingredients[g8i[h]].e3;
																	combo[31] = ingredients[g8i[h]].e4;
																	combo[32] = ingredients[g9i[i]].e1;
																	combo[33] = ingredients[g9i[i]].e2;
																	combo[34] = ingredients[g9i[i]].e3;
																	combo[35] = ingredients[g9i[i]].e4;
																	combo[36] = ingredients[g10i[j]].e1;
																	combo[37] = ingredients[g10i[j]].e2;
																	combo[38] = ingredients[g10i[j]].e3;
																	combo[39] = ingredients[g10i[j]].e4;
																	combo[40] = ingredients[g11i[k]].e1;
																	combo[41] = ingredients[g11i[k]].e2;
																	combo[42] = ingredients[g11i[k]].e3;
																	combo[43] = ingredients[g11i[k]].e4;
																	combo[44] = ingredients[g12i[l]].e1;
																	combo[45] = ingredients[g12i[l]].e2;
																	combo[46] = ingredients[g12i[l]].e3;
																	combo[47] = ingredients[g12i[l]].e4;
																	combo[48] = ingredients[g13i[m]].e1;
																	combo[49] = ingredients[g13i[m]].e2;
																	combo[50] = ingredients[g13i[m]].e3;
																	combo[51] = ingredients[g13i[m]].e4;
																	combo[52] = ingredients[g14i[n]].e1;
																	combo[53] = ingredients[g14i[n]].e2;
																	combo[54] = ingredients[g14i[n]].e3;
																	combo[55] = ingredients[g14i[n]].e4;
																	for (x = 0, count = 0; x <= 54; x++){
																		for (y = 0; y <= 55; y++){
																			if (effects[x] == combo[y]) {
																				count++;
																			}
																		}
																	}

																	count = count - 54;

																	//Assign combo to a res data structure and compare it with the top 5
																	next.i1 = a;
																	next.i2 = b;
																	next.i3 = c;
																	next.i4 = d;
																	next.i5 = e;
																	next.i6 = f;
																	next.i7 = g;
																	next.i8 = h;
																	next.i9 = i;
																	next.i10 = j;
																	next.i11 = k;
																	next.i12 = l;
																	next.i13 = m;
																	next.i14 = n;
																	next.reps = count;



																	bool mark;

																	do
																	{
																		mark = 0;
																		for (int top = 0; top <= 4; top++)
																		{
																			if (sol[4].reps > next.reps) {
																				swap(sol[4].i1, next.i1);
																				swap(sol[4].i2, next.i2);
																				swap(sol[4].i3, next.i3);
																				swap(sol[4].i4, next.i4);
																				swap(sol[4].i5, next.i5);
																				swap(sol[4].i6, next.i6);
																				swap(sol[4].i7, next.i7);
																				swap(sol[4].i8, next.i8);
																				swap(sol[4].i9, next.i9);
																				swap(sol[4].i10, next.i10);
																				swap(sol[4].i11, next.i11);
																				swap(sol[4].i12, next.i12);
																				swap(sol[4].i12, next.i12);
																				swap(sol[4].i13, next.i13);
																				swap(sol[4].i14, next.i14);
																				swap(sol[4].reps, next.reps);
																				if (sol[top].reps > sol[top + 1].reps)
																				{
																					swap(sol[top].i1, sol[top + 1].i1);
																					swap(sol[top].i2, sol[top + 1].i2);
																					swap(sol[top].i3, sol[top + 1].i3);
																					swap(sol[top].i4, sol[top + 1].i4);
																					swap(sol[top].i5, sol[top + 1].i5);
																					swap(sol[top].i6, sol[top + 1].i6);
																					swap(sol[top].i7, sol[top + 1].i7);
																					swap(sol[top].i8, sol[top + 1].i8);
																					swap(sol[top].i9, sol[top + 1].i9);
																					swap(sol[top].i10, sol[top + 1].i10);
																					swap(sol[top].i11, sol[top + 1].i11);
																					swap(sol[top].i12, sol[top + 1].i12);
																					swap(sol[top].i12, sol[top + 1].i12);
																					swap(sol[top].i13, sol[top + 1].i13);
																					swap(sol[top].i14, sol[top + 1].i14);
																					swap(sol[top].reps, sol[top + 1].reps);
																					mark = 1;
																				}
																			}

																		}
																	} while (mark == 1);

																}
																//cout << "\nCurrent m: " << m << "\n";
															}
															//cout << "\nCurrent l: " << l << "\n";
														}
														//cout << "\nCurrent k: " << k << "\n";
													}
													//cout << "\nCurrent j: " << j << "\n";
												}
												//cout << "\nCurrent i: " << i << "\n";
											}
											//cout << "\nCurrent h: " << h << "\n";
										}
										cout << "\nCurrent g: " << g << "\n";
									}
									cout << "\nCurrent f: " << f << "\n";
								}
								cout << "\nCurrent e: " << e << "\n";
		/*					}
							cout << "\nCurrent d: " << d << "\n";
						}
						cout << "\nCurrent c: " << c << "\n";
					}
					cout << "\nCurrent b: " << b << "\n";
				}
				cout << "\nCurrent a: " << a << "\n";
			}
*/
		}
		for (x = 0; x <= 4; x++) {
			cout << "\n" << x + 1 << ". Count: " << sol[x].reps;
			cout << "\n" << x + 1 << ". Ingredients: " << sol[x].i1 << sol[x].i2 << sol[x].i3 << sol[x].i4 << sol[x].i5 << sol[x].i6 << sol[x].i7 << sol[x].i8 << sol[x].i9 << sol[x].i10 << sol[x].i11 << sol[x].i12 << sol[x].i13 << sol[x].i14;
		}
		
		
		int ol = 0;
		string olarr[50];

		/*for (x = 0; x <= 27; x++){
			cout << ingredients[i4[x]].name;
		}
		for (x = 0; x <= 34; x++){
			cout << ingredients[i4[x]].name;
		}
		*/

		/*for (x = 0; x <= 27; x++){
			for (y = 0; y <= 27; y++){
				if (i4[x] == i4[y] && x != y){
					olarr[ol] = ingredients[i4[y]].name;
					cout << "\nDouble4: " << olarr[ol];
					ol++;
				}
			}
		}

		for (x = 0; x <= 34; x++){
			for (y = 0; y <= 34; y++){
				if (i5[x] == i5[y] && x != y){
					olarr[ol] = ingredients[i5[y]].name;
					cout << "\nDouble5: " << olarr[ol];
					ol++;
				}
			}
		}

		for (x = 0; x <= 27; x++){
			for (y = 0; y <= 34; y++){
				if (i4[x] == i5[y]) {
					olarr[ol] = ingredients[i5[y]].name;
					cout << "\nDouble45: " << olarr[ol];
					ol++;
				}
			}
		}


		cout << "\nOverlap: " << ol;
		*/


		//for (z = 0; z <= r4 - 1; z++){
		//	cout << "\nFour count effects: " << effects[rare4[z]];
		//}


		/*int count[98];
		string combo[56];
		struct res {
		int i1;
		int i2;
		int i3;
		int i4;
		int i5;
		int i6;
		int i7;
		int i8;
		int i9;
		int i10;
		int i11;
		int i12;
		int i13;
		int i14;
		int reps;
		};

		//HERE, CREATE COMBINATIONS AND COUNT REPEATS
		unsigned int a, b, c, d, e, f, g, h, i, j, k, l, m, n;
		a = 0;



		/*for (a = 0, b = a + 1, c = a + 2, d = a + 3, e = a + 4, f = a + 5, g = a + 6, h = a + 7, i = a + 8, j = a + 9, k = a + 10, l = a + 11, m = a + 12, n = a + 13; a <= 97; a++){
		for (b = a + 1; b <= 98; b++){
		for (c = a + 2; c <= 99; c++){
		for (d = a + 3; d <= 100; d++){
		for (e = a + 4; e <= 101; e++){
		for (f = a + 5; f <= 102; f++){
		for (g = a + 6; g <= 103; g++){
		for (h = a + 7; h <= 104; h++){
		for (i = a + 8; i <= 105; i++){
		for (j = a + 9; j <= 106; j++){
		for (k = a + 10; k <= 107; k++){
		for (l = a + 11; l <= 108; l++){
		for (m = a + 12; m <= 109; m++){
		for (n = a + 12; n <= 110; n++){
		combo[0] = ingredients[a].e1;
		//cout << combo[0];
		combo[1] = ingredients[a].e2;
		//cout << combo[1];
		combo[2] = ingredients[a].e3;
		//cout << combo[2];
		combo[3] = ingredients[a].e4;
		//cout << combo[3];
		combo[4] = ingredients[b].e1;
		combo[5] = ingredients[b].e2;
		combo[6] = ingredients[b].e3;
		combo[7] = ingredients[b].e4;
		combo[8] = ingredients[c].e1;
		combo[9] = ingredients[c].e2;
		combo[10] = ingredients[c].e3;
		combo[11] = ingredients[c].e4;
		combo[12] = ingredients[d].e1;
		combo[13] = ingredients[d].e2;
		combo[14] = ingredients[d].e3;
		combo[15] = ingredients[d].e4;
		combo[16] = ingredients[e].e1;
		combo[17] = ingredients[e].e2;
		combo[18] = ingredients[e].e3;
		combo[19] = ingredients[e].e4;
		combo[20] = ingredients[f].e1;
		combo[21] = ingredients[f].e2;
		combo[22] = ingredients[f].e3;
		combo[23] = ingredients[f].e4;
		combo[24] = ingredients[g].e1;
		combo[25] = ingredients[g].e2;
		combo[26] = ingredients[g].e3;
		combo[27] = ingredients[g].e4;
		combo[28] = ingredients[h].e1;
		combo[29] = ingredients[h].e2;
		combo[30] = ingredients[h].e3;
		combo[31] = ingredients[h].e4;
		combo[32] = ingredients[i].e1;
		combo[33] = ingredients[i].e2;
		combo[34] = ingredients[i].e3;
		combo[35] = ingredients[i].e4;
		combo[36] = ingredients[j].e1;
		combo[37] = ingredients[j].e2;
		combo[38] = ingredients[j].e3;
		combo[39] = ingredients[j].e4;
		combo[40] = ingredients[k].e1;
		combo[41] = ingredients[k].e2;
		combo[42] = ingredients[k].e3;
		combo[43] = ingredients[k].e4;
		combo[44] = ingredients[l].e1;
		combo[45] = ingredients[l].e2;
		combo[46] = ingredients[l].e3;
		combo[47] = ingredients[l].e4;
		combo[48] = ingredients[m].e1;
		combo[49] = ingredients[m].e2;
		combo[50] = ingredients[m].e3;
		combo[51] = ingredients[m].e4;
		combo[52] = ingredients[n].e1;
		combo[53] = ingredients[n].e2;
		combo[54] = ingredients[n].e3;
		combo[55] = ingredients[n].e4;
		}
		}
		}
		}
		}
		}
		}
		}
		}
		}
		}
		}
		}
		cout << a;
		}*/

		//take ingredients[0] and ingredients[1] and compare e1-e4, e1-e1,e1-e2,e1-e3,e1-e4,e2-e2,e2-e3,e2-e4,e3-e3,e3-e4,e4-e4
		//count similarities
		//compare third ingredient
		//count and add to  first count
		//compare 4th
		//count and add
		//compare 5th
		//count and add
		//FORGET THAT!^^^
		//need something to retrieve the separate effects and store them as a standard effect (this will help with the form too)
		//_______________________________________
		//^^^ DIDN'T WORK! It would take 95 million years to solve
		/*New plan: 1.find rarest effects (and 2nd and third too?)
		2. Check which ingredients can combine with without overlap
		3. Eliminate the overlappers, check that all effects are still present
		4. Then run all possible combos?
		*/
	}
	else cout << "Can't open the file. Why the heck would it do that?";
	

	return 0;
}
